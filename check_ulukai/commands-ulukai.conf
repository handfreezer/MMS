template CheckCommand "ulukai_ipv4o6" {
	vars.check_address = {{
		var addr_v4 = macro("$address$")
		var addr_v6 = macro("$address6$")

		if (addr_v4 && !macro("$check_ipv6$") || macro("$check_ipv4$")) {
			return addr_v4
		} else {
			return addr_v6
		}
	}}

	vars.check_ipv4 = false
	vars.check_ipv6 = false
}

object CheckCommand "ulukai_snmp_disk" {
	import "ulukai_ipv4o6"

	command = [ "check_disk.pl" ]

	arguments = {
		"-H" = {
			required = true
			value = "$check_address$"
			description = "host to check"
		}
		"-c" = {
			value = "$snmp_community$"
			description = "Community to connect with"
		}
		"-p" = {
			repeat_key = true
			value = "$udisk_path$"
			description = "path to check with w as warning percent used and c as critical percent used"
		}
		"-a" = {
			set_if = "$udisk_perfall$"
			description = "Activate generation of performance data"
		}
		"--warning" = {
			value = "$udisk_warning_global$"
			description = "default global percent used warning value"
		}
		"--critical" = {
			value = "$udisk_critical_global$"
			description = "default global percent used critical value"
		}
		"-D" = {
			set_if = "$udisk_debug$"
			description = "activate debug mode, could be very verbose"
		}
	}

	vars.snmp_community = "public"
	vars.udisk_path = ["/,90,95"]
}

object CheckCommand "ulukai_snmp_load_cpu" {
	import "ulukai_ipv4o6"

	command = [ "check_snmp_load.pl" ]

	arguments = {
		"-H" = {
			required = true
			value = "$check_address$"
			description = "host to check"
		}
		"-C" = {
			value = "$snmp_community$"
			description = "Community to connect with"
		}
		"-2" = {
			set_if = "$snmp_v2$"
			description = "Activation du SNMP en v2c"
		}
		"-P" = {
			value = "$snmp_port$"
			description = "SNMP port"
		}
		"-t" = {
			value = "$snmp_timeout$"
			description = "Timeout de réponse SNMP"
		}
		"-f" = {
			set_if = "$uload_perfall$"
			description = "Générer les données de performance"
		}
		"-w" = {
			required = true
			value = "$uload_warning$"
			description = "default global percent used warning value"
		}
		"-c" = {
			required = true
			value = "$uload_critical$"
			description = "default global percent used critical value"
		}
		"-T" = {
			required = true
			value = "$uload_type$"
			description = "type d'interrogation de charge CPU via SNMP"
		}
	}

	vars.snmp_community = "public"
	vars.snmp_timeout = 4
	vars.uload_type = {{
		var vWarning = macro("$uload_warning$")

                if ( regex ("^[.[:digit:]]*,[.[:digit:]]*,[.[:digit:]]*$", vWarning) ) {
			#type 1-5-15 : type=netsl
                        return "netsl"
                } else {
			#type CPU global : type=stand
                        return "stand"
                }
	}}
}

object CheckCommand "ulukai_snmp_mem" {
	import "ulukai_ipv4o6"

	command = [ "check_snmp_mem.pl" ]

	arguments = {
		"-H" = {
			required = true
			value = "$check_address$"
			description = "host to check"
		}
		"-C" = {
			value = "$snmp_community$"
			description = "Community to connect with"
		}
		"-2" = {
			set_if = "$snmp_v2$"
			description = "Activation du SNMP en v2c"
		}
		"-P" = {
			value = "$snmp_port$"
			description = "SNMP port"
		}
		"-t" = {
			value = "$snmp_timeout$"
			description = "Timeout de réponse SNMP"
		}
		"-f" = {
			set_if = "$umem_perfall$"
			description = "Générer les données de performance"
		}
		"-w" = {
			required = true
			value = "$umem_warning$"
			description = "default global percent used warning value"
		}
		"-c" = {
			required = true
			value = "$umem_critical$"
			description = "default global percent used critical value"
		}
		"" = {
			required = true
			value = "$umem_type$"
			description = "type d'interrogation de charge CPU via SNMP"
		}
	}

	vars.snmp_community = "public"
	vars.snmp_timeout = 4
	vars.umem_type = {{
		var vWarning = macro("$umem_warning$")

                if ( regex ("^[.[:digit:]]*,[.[:digit:]]*$", vWarning) ) {
			#type ram,swap : type=netsnmp
                        return "--netsnmp"
                } else {
                        return "--hp"
                }
	}}
}

