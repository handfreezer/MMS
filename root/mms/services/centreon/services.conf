apply Service "CPU-processors" {
  import "generic-service"
  name = "CPU-Processors"
  check_command = "oc_centreon_plugins_snmp_linux_cpu"

  ignore where host.vars.mms.no_cpu_processors
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "CPU-kernel" {
  import "generic-service"
  name = "CPU-Kernel"
  check_command = "oc_centreon_plugins_snmp_linux_cpu_detailed"

  ignore where host.vars.mms.no_cpu_kernel
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "RAM" {
  import "generic-service"
  check_command = "oc_centreon_plugins_snmp_linux_memory"

  ignore where host.vars.mms.no_ram
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "CPU-average" {
  import "generic-service"
  name = "CPU-Average"
  check_command = "oc_centreon_plugins_snmp_linux_load"

  ignore where host.vars.mms.no_cpu_average
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "UPTIME" {
  import "generic-service"
  check_command = "oc_centreon_plugins_snmp_linux_uptime"

  ignore where host.vars.mms.no_uptime
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "MMS_PARTITION" for (path_name => config in host.vars.disk_paths) {
  import "generic-service"
  name = "Partition " + path_name
  display_name = "Partition " + path_name
  check_command = "oc_centreon_plugins_snmp_linux_storage"
  vars += config

  ignore where host.vars.mms.no_partition
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

apply Service "MMS_CERTIFICATE" for (instance => conf in host.vars.x509) {
  import "generic-service"
  name = "Certificat " + instance.upper()
  display_name = "Certificat " + instance.upper()
  check_command = "oc_centreon_plugins_protocols_x509_https"
  vars.cc_proto_x509_http_peer_addr = conf.nameserver
  vars.cc_proto_x509_header = conf.nameserver
  if ( conf.delay_warning ) {
        vars.cc_proto_x509_warning_status = "%{expiration} < " + conf.delay_warning
  }
  if ( conf.delay_critical ) {
    vars.cc_proto_x509_critical_status = "%{expiration} < " + conf.delay_critical
    if ( conf.subject ) {
      vars.cc_proto_x509_critical_status += " || %{subject} !~ '/" + conf.subject + "/'"
    }
    if ( conf.alt_subjects ) {
      vars.cc_proto_x509_critical_status += " || %{alt_subjects} !~ '/.*" + conf.alt_subjects + ".*/'"
    }
  }

  ignore where host.vars.mms.no_certificate
  assign where host.vars.mms && (host.address || host.address6)
}

apply Service "MMS_SNMP_NUMERIC" for (oid_name => config in host.vars.oids) {
  import "generic-service"
  name = oid_name
  display_name = oid_name
  check_command = "oc_centreon_plugins_protocols_snmp_numeric"
  vars += config

  ignore where host.vars.mms.no_snmp_numeric
  assign where host.vars.mms && (host.address || host.address6) && host.vars.os == "linux" && host.vars.snmp_community
}

